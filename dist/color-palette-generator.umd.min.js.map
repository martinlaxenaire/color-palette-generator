{"version":3,"file":"color-palette-generator.umd.min.js","sources":["../src/ColorModel.ts","../src/ColorPaletteGenerator.ts"],"sourcesContent":["/**\r\n * Represents a hex color in the format `#RRGGBB`.\r\n */\r\nexport type HexColor = `#${string}`\r\n\r\n/**\r\n * Represents an RGB color.\r\n */\r\nexport interface RGBColor {\r\n  /** Red component (0-255). */\r\n  r: number\r\n  /** Green component (0-255). */\r\n  g: number\r\n  /** Blue component (0-255). */\r\n  b: number\r\n}\r\n\r\n/**\r\n * Represents an HSL color.\r\n */\r\nexport interface HSLColor {\r\n  /** Hue (0-360). */\r\n  h: number\r\n  /** Saturation (0-100). */\r\n  s: number\r\n  /** Lightness (0-100). */\r\n  l: number\r\n}\r\n\r\n/**\r\n * Represents an HSV color.\r\n */\r\nexport interface HSVColor {\r\n  /** Hue (0-360). */\r\n  h: number\r\n  /** Saturation (0-100). */\r\n  s: number\r\n  /** Value/Brightness (0-100). */\r\n  v: number\r\n}\r\n\r\n/**\r\n * Represents a CMYK color.\r\n */\r\nexport interface CMYKColor {\r\n  /** Cyan component (0-100). */\r\n  c: number\r\n  /** Magenta component (0-100). */\r\n  m: number\r\n  /** Yellow component (0-100). */\r\n  y: number\r\n  /** Black component (0-100). */\r\n  k: number\r\n}\r\n\r\n/**\r\n * Represents a color in multiple color spaces and provides conversion utilities.\r\n *\r\n * @example\r\n * ```javascript\r\n * const redColor = new ColorModel('#ff0000')\r\n * const randomColor = new ColorModel()\r\n * ```\r\n */\r\nexport class ColorModel {\r\n  /**\r\n   * The hexadecimal representation of the color.\r\n   * @private\r\n   */\r\n  #hex: HexColor\r\n  /**\r\n   * The RGB representation of the color.\r\n   *  @private\r\n   */\r\n  #rgb: RGBColor\r\n  /**\r\n   * The HSL representation of the color.\r\n   * @private\r\n   */\r\n  #hsl: HSLColor\r\n  /**\r\n   * The HSV representation of the color.\r\n   * @private\r\n   */\r\n  #hsv: HSVColor\r\n\r\n  /**\r\n   * Creates a new ColorModel instance from a {@link HexColor | hex code}.\r\n   * @param hexCode The hexadecimal color code.\r\n   */\r\n  constructor(hexCode = '#000000' as HexColor) {\r\n    this.hex = hexCode\r\n  }\r\n\r\n  // HEX\r\n\r\n  /**\r\n   * Gets the hexadecimal representation of the color.\r\n   */\r\n  get hex(): HexColor {\r\n    return this.#hex\r\n  }\r\n\r\n  /**\r\n   * Sets the hexadecimal color and updates related color representations.\r\n   */\r\n  set hex(value: HexColor) {\r\n    this.#hex = value\r\n    this.#rgb = this.hexToRgb(value)\r\n    this.#hsl = this.rgbToHsl(this.rgb)\r\n    this.#hsv = this.hslToHsv(this.hsl)\r\n  }\r\n\r\n  // RGB\r\n\r\n  /**\r\n   * Gets the RGB representation of the color.\r\n   */\r\n  get rgb(): RGBColor {\r\n    return this.#rgb\r\n  }\r\n\r\n  /**\r\n   * Sets the RGB color and updates related color representations.\r\n   */\r\n  set rgb(value: RGBColor) {\r\n    this.#rgb = value\r\n    this.#hex = this.rgbToHex(value)\r\n    this.#hsl = this.rgbToHsl(value)\r\n    this.#hsv = this.hslToHsv(this.hsl)\r\n  }\r\n\r\n  // HSL\r\n\r\n  /**\r\n   * Gets the HSL representation of the color.\r\n   */\r\n  get hsl(): HSLColor {\r\n    return this.#hsl\r\n  }\r\n\r\n  /**\r\n   * Sets the HSL color and updates related color representations.\r\n   */\r\n  set hsl(value: HSLColor) {\r\n    this.#hsl = value\r\n    this.#rgb = this.hslToRgb(value)\r\n    this.#hex = this.rgbToHex(this.rgb)\r\n    this.#hsv = this.hslToHsv(value)\r\n  }\r\n\r\n  // HSV\r\n\r\n  /**\r\n   * Gets the HSV representation of the color.\r\n   */\r\n  get hsv(): HSVColor {\r\n    return this.#hsv\r\n  }\r\n\r\n  /**\r\n   * Sets the HSV color and updates related color representations.\r\n   */\r\n  set hsv(value: HSVColor) {\r\n    this.#hsv = value\r\n    this.#hsl = this.hsvToHsl(value)\r\n    this.#rgb = this.hslToRgb(this.hsl)\r\n    this.#hex = this.rgbToHex(this.rgb)\r\n  }\r\n\r\n  // HEX & RGB\r\n\r\n  /**\r\n   * Converts an RGB color to a hexadecimal string.\r\n   * @param rgb The {@link RGBColor | RGB color}.\r\n   * @returns The {@link HexColor | hex representation}.\r\n   */\r\n  rgbToHex({ r = 0, g = 0, b = 0 }: RGBColor): HexColor {\r\n    const toHex = (x) => {\r\n      const hex = Math.round(x).toString(16)\r\n      return hex.length === 1 ? '0' + hex : hex\r\n    }\r\n    return '#'.concat(toHex(r), '').concat(toHex(g), '').concat(toHex(b), '') as HexColor\r\n  }\r\n\r\n  /**\r\n   * Converts a hexadecimal color to an RGB color.\r\n   * @param hexCode The {@link HexColor | hex color code}.\r\n   * @returns The {@link RGBColor | RGB representation}.\r\n   */\r\n  hexToRgb(hexCode: HexColor): RGBColor {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexCode)\r\n    return result\r\n      ? {\r\n          r: parseInt(result[1], 16),\r\n          g: parseInt(result[2], 16),\r\n          b: parseInt(result[3], 16),\r\n        }\r\n      : { r: 0, g: 0, b: 0 }\r\n  }\r\n\r\n  // RGB & HSL\r\n\r\n  /**\r\n   * Converts an RGB color to a HSL color.\r\n   * @param rgb The {@link RGBColor | RGB color}.\r\n   * @returns The {@link HSLColor | HSL representation}.\r\n   */\r\n  rgbToHsl({ r = 0, g = 0, b = 0 }: RGBColor): HSLColor {\r\n    ;(r /= 255), (g /= 255), (b /= 255)\r\n    const max = Math.max(r, g, b),\r\n      min = Math.min(r, g, b)\r\n    let h,\r\n      s,\r\n      l = (max + min) / 2\r\n\r\n    if (max == min) {\r\n      h = s = 0 // achromatic\r\n    } else {\r\n      const d = max - min\r\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\r\n      switch (max) {\r\n        case r:\r\n          h = (g - b) / d + (g < b ? 6 : 0)\r\n          break\r\n        case g:\r\n          h = (b - r) / d + 2\r\n          break\r\n        case b:\r\n          h = (r - g) / d + 4\r\n          break\r\n      }\r\n      h /= 6\r\n    }\r\n\r\n    return { h: Math.floor(h * 360), s: Math.floor(s * 100), l: Math.floor(l * 100) }\r\n  }\r\n\r\n  /**\r\n   * Converts an HSL color to an RGB color.\r\n   * @param hsl The {@link HSLColor | HSL color}.\r\n   * @returns The {@link RGBColor | RGB representation}.\r\n   */\r\n  hslToRgb({ h = 0, s = 0, l = 0 }: HSLColor): RGBColor {\r\n    h /= 360\r\n    s /= 100\r\n    l /= 100\r\n\r\n    const output = {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n    }\r\n\r\n    if (s === 0) {\r\n      output.r = output.g = output.b = l // achromatic\r\n    } else {\r\n      const hue2rgb = (p, q, t) => {\r\n        if (t < 0) t += 1\r\n        if (t > 1) t -= 1\r\n        if (t < 1 / 6) return p + (q - p) * 6 * t\r\n        if (t < 1 / 2) return q\r\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n        return p\r\n      }\r\n\r\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n      const p = 2 * l - q\r\n      output.r = hue2rgb(p, q, h + 1 / 3)\r\n      output.g = hue2rgb(p, q, h)\r\n      output.b = hue2rgb(p, q, h - 1 / 3)\r\n    }\r\n\r\n    output.r *= 255\r\n    output.g *= 255\r\n    output.b *= 255\r\n\r\n    return output\r\n  }\r\n\r\n  // HSL & HSV\r\n\r\n  /**\r\n   * Converts a HSL color to a HSV color.\r\n   * @param hsl The {@link HSLColor | HSL color}.\r\n   * @returns The {@link HSVColor | HSV representation}.\r\n   */\r\n  hslToHsv({ h = 0, s = 0, l = 0 }: HSLColor): HSVColor {\r\n    const L = l / 100\r\n    const V = (s / 100) * Math.min(L, 1 - L) + L\r\n    return {\r\n      h,\r\n      s: V ? 100 * (2 - (2 * L) / V) : 0,\r\n      v: V * 100,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a HSV color to a HSL color.\r\n   * @param hsv The {@link HSVColor | HSV color}.\r\n   * @returns The {@link HSLColor | HSL representation}.\r\n   */\r\n  hsvToHsl({ h = 0, s = 0, v = 0 }: HSVColor): HSLColor {\r\n    const V = v / 100\r\n    const L = V - (V * s) / 200\r\n    const m = Math.min(L, 1 - L)\r\n    return {\r\n      h,\r\n      s: m ? (100 * (V - L)) / m : 0,\r\n      l: L * 100,\r\n    }\r\n  }\r\n\r\n  // CMYK\r\n\r\n  /**\r\n   * Converts an RGB color to a CMYK color.\r\n   * @param hsv The {@link RGBColor | RGB color}.\r\n   * @param normalized Whether to normalize the representation. Default to `false`.\r\n   * @returns The {@link CMYKColor | CMYK representation}.\r\n   */\r\n  rgbToCmyk({ r = 0, g = 0, b = 0 }: RGBColor, normalized = false): CMYKColor {\r\n    let c = 1 - r / 255\r\n    let m = 1 - g / 255\r\n    let y = 1 - b / 255\r\n    let k = Math.min(c, Math.min(m, y))\r\n\r\n    c = (c - k) / (1 - k)\r\n    m = (m - k) / (1 - k)\r\n    y = (y - k) / (1 - k)\r\n\r\n    if (!normalized) {\r\n      c = Math.round(c * 10000) / 100\r\n      m = Math.round(m * 10000) / 100\r\n      y = Math.round(y * 10000) / 100\r\n      k = Math.round(k * 10000) / 100\r\n    }\r\n\r\n    c = isNaN(c) ? 0 : c\r\n    m = isNaN(m) ? 0 : m\r\n    y = isNaN(y) ? 0 : y\r\n    k = isNaN(k) ? 0 : k\r\n\r\n    return {\r\n      c,\r\n      m,\r\n      y,\r\n      k,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a CMYK color to an RGB color.\r\n   * @param hsv The {@link CMYKColor | CMYK color}.\r\n   * @param normalized Whether to normalize the representation. Default to `false`.\r\n   * @returns The {@link RGBColor | RGB representation}.\r\n   */\r\n  cmykToRgb({ c = 0, m = 0, y = 0, k = 0 }: CMYKColor, normalized = false): RGBColor {\r\n    c = c / 100\r\n    m = m / 100\r\n    y = y / 100\r\n    k = k / 100\r\n\r\n    c = c * (1 - k) + k\r\n    m = m * (1 - k) + k\r\n    y = y * (1 - k) + k\r\n\r\n    let r = 1 - c\r\n    let g = 1 - m\r\n    let b = 1 - y\r\n\r\n    if (!normalized) {\r\n      r = Math.round(255 * r)\r\n      g = Math.round(255 * g)\r\n      b = Math.round(255 * b)\r\n    }\r\n\r\n    return {\r\n      r: r,\r\n      g: g,\r\n      b: b,\r\n    }\r\n  }\r\n\r\n  // UTILS\r\n\r\n  /**\r\n   * Clones the current color instance.\r\n   * @returns A new {@link ColorModel} instance with the same color values.\r\n   */\r\n  clone(): ColorModel {\r\n    return new ColorModel(this.hex)\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given {@link ColorModel} and this {@link ColorModel} are equal.\r\n   * @param color {@link ColorModel} to check against.\r\n   * @returns Whether the colors are equal.\r\n   */\r\n  equals(color: ColorModel): boolean {\r\n    return this.hex === color.hex\r\n  }\r\n\r\n  /**\r\n   * Adjusts the saturation of the color in the HSV color space.\r\n   * @param saturation The amount to adjust the saturation.\r\n   * @param max The maximum saturation value.\r\n   * @param min The minimum saturation value.\r\n   * @returns The updated color instance.\r\n   */\r\n  saturate(saturation: number = 0, max: number = 100, min: number = 0): this {\r\n    const currentSat = this.hsv.s\r\n    this.hsv.s = currentSat + saturation > max ? max : currentSat + saturation < min ? min : currentSat + saturation\r\n\r\n    this.hsl = this.hsvToHsl(this.hsv)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Adjusts the brightness of the color.\r\n   * @param brightness The amount to adjust the brightness.\r\n   * @param max The maximum brightness value.\r\n   * @param min The minimum brightness value.\r\n   * @returns The updated color instance.\r\n   */\r\n  brighten(brightness: number = 0, max: number = 100, min: number = 0): this {\r\n    const currentBrightness = this.hsv.v\r\n    this.hsl.l =\r\n      currentBrightness + brightness > max\r\n        ? max\r\n        : currentBrightness + brightness < min\r\n        ? min\r\n        : currentBrightness + brightness\r\n\r\n    this.hsl = this.hsvToHsl(this.hsv)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Adjusts the saturation of the color in the HSL color space.\r\n   * @param saturation The amount to adjust the saturation.\r\n   * @param max The maximum allowed saturation value.\r\n   * @param min The minimum allowed saturation value.\r\n   * @returns The modified color instance.\r\n   */\r\n  saturateHsl(saturation: number = 0, max: number = 100, min: number = 0): this {\r\n    const currentSat = this.hsl.s\r\n    this.hsl.s = currentSat + saturation > max ? max : currentSat + saturation < min ? min : currentSat + saturation\r\n\r\n    this.rgb = this.hslToRgb(this.hsl)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Adjusts the lightness of the color in the HSL color space.\r\n   * @param lightness The amount to adjust the lightness.\r\n   * @param max The maximum allowed lightness value.\r\n   * @param min The minimum allowed lightness value.\r\n   * @returns The modified color instance.\r\n   */\r\n  lighten(lightness: number = 0, max: number = 100, min: number = 0): this {\r\n    const currentLightness = this.hsl.l\r\n    this.hsl.l =\r\n      currentLightness + lightness > max ? max : currentLightness + lightness < min ? min : currentLightness + lightness\r\n\r\n    this.rgb = this.hslToRgb(this.hsl)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Adds a value to the hue, ensuring it remains within the 0-360 degrees range.\r\n   * @param h The original hue value.\r\n   * @param add The amount to add to the hue.\r\n   * @returns The adjusted hue value.\r\n   */\r\n  addToHue(h: number = 0, add: number = 0): number {\r\n    return h + add > 360 ? (h + add) % 360 : h + add < 0 ? 360 + h + add : h + add\r\n  }\r\n}\r\n","import { ColorModel } from './ColorModel.js'\r\n\r\n/**\r\n * Defines a palette of {@link ColorModel}.\r\n */\r\nexport type ColorPalette = ColorModel[]\r\n\r\n/**\r\n * Defines the generated {@link ColorPalette}.\r\n */\r\nexport interface ColorPalettes {\r\n  /**\r\n   * Base {@link ColorPalette} generated.\r\n   */\r\n  base: ColorPalette\r\n  /**\r\n   * Light {@link ColorPalette} generated from the base palette.\r\n   */\r\n  light: ColorPalette\r\n  /**\r\n   * Dark {@link ColorPalette} generated from the base palette.\r\n   */\r\n  dark: ColorPalette\r\n}\r\n\r\nexport interface ColorPaletteParams {\r\n  /**\r\n   * Custom function to generate a random number between `0` and `1`. Default to `Math.random()`.\r\n   */\r\n  rand?: () => number\r\n  /**\r\n   * Precision of the base palette, i.e. number of colors generated based on hue on each side of the base color. This gives a base color palette of length `precision * 2 + 1`. Default to `4`.\r\n   */\r\n  precision?: number\r\n  /**\r\n   * Hue range to use when generating the base color palette, in degrees. Default to `180`.\r\n   */\r\n  hueRange?: number\r\n  /**\r\n   * Base {@link ColorModel} or {@link ColorModel#hex | ColorModel hexadecimal} representation to use to generate a palette. Default to a random color.\r\n   */\r\n  baseColor?: ColorModel | ColorModel['hex']\r\n  /**\r\n   * Base saturation level to use when generating a random color if `baseColor` is not defined. Default to a random number between `20` and `85`.\r\n   */\r\n  baseSaturation?: number\r\n}\r\n\r\n/**\r\n * Generate a color palette based on a base {@link ColorModel}, a hue range and a precision level.\r\n *\r\n * Based on the theory explained in this {@link https://www.youtube.com/watch?v=u5AnzLg1HxY | video}, which is to generate a base palette as a set of colors around the given base color by shifting its hue increasingly, then creates additional lighter and darker palettes by manipulating the base palette colors saturation and brightness.\r\n *\r\n * @example\r\n * ```javascript\r\n * // create a palette from a random color\r\n * const palette = new ColorPaletteGenerator()\r\n *\r\n * // get a distributed palette of 6 colors based on 'palette'\r\n * const distributedPalette = palette.getDistributedPalette({\r\n *  length: 6,\r\n * })\r\n *\r\n * // create another palette from a green color\r\n * const paletteFromColor = new ColorPaletteGenerator({\r\n *  precision: 6,\r\n *  baseColor: '#3459c7',\r\n * })\r\n *\r\n * // get a random palette of 4 colors based on 'paletteFromColor'\r\n * const randomPaletteFromColor = paletteFromColor.getRandomPalette()\r\n * ```\r\n */\r\nexport class ColorPaletteGenerator {\r\n  /**\r\n   * Custom function to generate a random number between `0` and `1`. Default to `Math.random()`.\r\n   */\r\n  rand: ColorPaletteParams['rand']\r\n  /**\r\n   * Precision of the base palette, i.e. number of colors generated based on hue on each side of the base color. This gives a base color palette of length `precision * 2 + 1`. Default to `4`.\r\n   */\r\n  precision: ColorPaletteParams['precision']\r\n  /**\r\n   * Hue range to use when generating the base color palette, in degrees. Default to `180`.\r\n   */\r\n  hueRange: ColorPaletteParams['hueRange']\r\n  /**\r\n   * Base {@link ColorModel#hex | ColorModel hexadecimal} representation to use to generate a palette. Default to a random color.\r\n   */\r\n  baseColor: ColorModel\r\n\r\n  /**\r\n   * Generated {@link ColorPalettes}.\r\n   */\r\n  palettes: ColorPalettes\r\n\r\n  /**\r\n   * Creates a new {@link ColorPaletteGenerator} instance from the given parameters.\r\n   * @param param {@link ColorPaletteParams} used to generate the palette.\r\n   */\r\n  constructor(\r\n    {\r\n      rand = () => Math.random(),\r\n      precision = 4,\r\n      hueRange = 180, // in degrees\r\n      baseColor, // hex code or ColorModel\r\n      baseSaturation,\r\n    } = {} as ColorPaletteParams\r\n  ) {\r\n    this.rand = rand\r\n    this.precision = precision\r\n    this.hueRange = hueRange\r\n\r\n    if (baseColor) {\r\n      if (typeof baseColor === 'string') {\r\n        this.setBaseColor(baseColor, baseSaturation)\r\n      } else {\r\n        this.baseColor = baseColor\r\n      }\r\n    } else {\r\n      this.setBaseColor()\r\n      this.baseColor.hsv = {\r\n        h: Math.round(this.rand() * 100 * 3.6),\r\n        s: baseSaturation !== undefined ? baseSaturation : Math.round(this.rand() * 20 + 65),\r\n        v: Math.round(this.rand() * 20 + 65),\r\n      }\r\n    }\r\n\r\n    this.generatePalettes()\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link baseColor} to use to generate the {@link palettes}.\r\n   * @param baseColor {@link ColorModel#hex | ColorModel hexadecimal} representation to use. Default to `#000000`.\r\n   * @param baseSaturation Saturation level to use if any.\r\n   */\r\n  setBaseColor(baseColor: ColorModel['hex'] = '#000000', baseSaturation: number | null = null) {\r\n    this.baseColor = new ColorModel(baseColor)\r\n    if (baseSaturation !== undefined) {\r\n      this.baseColor.saturate(baseSaturation)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the {@link palettes}.\r\n   */\r\n  generatePalettes() {\r\n    this.palettes = {\r\n      base: [],\r\n      light: [],\r\n      dark: [],\r\n    }\r\n\r\n    this.generateBasePalette()\r\n    this.generateLightPalette()\r\n    this.generateDarkPalette()\r\n  }\r\n\r\n  /**\r\n   * Generates the {@link palettes#base | base palette}.\r\n   *\r\n   * Use the {@link baseColor} to generate `n * 2` colors (where `n` is the {@link precision}) by shifting the hue around the {@link baseColor} by the {@link hueRange}.\r\n   */\r\n  generateBasePalette() {\r\n    this.palettes.base.push(this.baseColor)\r\n\r\n    // first n (precision) colors\r\n    const hueStep = (this.hueRange * 0.5) / this.precision\r\n\r\n    let endSaturation = this.rand() * 5 + 22.5\r\n    let endValue = this.rand() * 7.5 + 90\r\n\r\n    for (let i = 1; i <= this.precision; i++) {\r\n      const color = new ColorModel()\r\n\r\n      const h = color.addToHue(this.baseColor.hsv.h, hueStep * i)\r\n      const s = Math.max(\r\n        0,\r\n        Math.min(100, this.baseColor.hsv.s - (i * (this.baseColor.hsv.s - endSaturation)) / this.precision)\r\n      )\r\n      const v = Math.max(\r\n        0,\r\n        Math.min(100, this.baseColor.hsv.v + (i * (endValue - this.baseColor.hsv.v)) / this.precision)\r\n      )\r\n\r\n      color.hsv = {\r\n        h,\r\n        s,\r\n        v,\r\n      }\r\n\r\n      this.palettes.base.unshift(color)\r\n    }\r\n\r\n    // second set of n (precision) colors\r\n    endSaturation = this.rand() * 7.5 + 90\r\n    endValue = this.rand() * 5 + 22.5\r\n\r\n    for (let i = 1; i <= this.precision; i++) {\r\n      const color = new ColorModel()\r\n\r\n      const h = color.addToHue(this.baseColor.hsv.h, -hueStep * i)\r\n      const s = Math.max(\r\n        0,\r\n        Math.min(100, this.baseColor.hsv.s + (i * (endSaturation - this.baseColor.hsv.s)) / this.precision)\r\n      )\r\n      const v = Math.max(\r\n        0,\r\n        Math.min(100, this.baseColor.hsv.v - (i * (this.baseColor.hsv.v - endValue)) / this.precision)\r\n      )\r\n\r\n      color.hsv = {\r\n        h,\r\n        s,\r\n        v,\r\n      }\r\n\r\n      this.palettes.base.push(color)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the {@link palettes#light | light palette} based on the {@link palettes#base | base palette} by manipulating saturation and brightness.\r\n   */\r\n  generateLightPalette() {\r\n    const hue = this.rand() * 5 + 7.5\r\n    const saturation = this.rand() * 7.5 + 22.5\r\n    const value = this.rand() * 7.5 + 27.5\r\n\r\n    for (let i = 0; i < this.palettes.base.length; i++) {\r\n      const color = new ColorModel(this.palettes.base[i].hex)\r\n      color.hsv = {\r\n        h: color.addToHue(color.hsv.h, -hue),\r\n        s: Math.max(0, Math.min(100, color.hsv.s - saturation)),\r\n        v: Math.max(0, Math.min(100, color.hsv.v + value)),\r\n      }\r\n\r\n      this.palettes.light.push(color)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the {@link palettes#dark | dark palette} based on the {@link palettes#base | base palette} by manipulating saturation and brightness.\r\n   */\r\n  generateDarkPalette() {\r\n    const hue = this.rand() * 5 + 7.5\r\n    const saturation = this.rand() * 7.5 + 22.5\r\n    const value = this.rand() * 7.5 + 27.5\r\n\r\n    for (let i = 0; i < this.palettes.base.length; i++) {\r\n      const color = new ColorModel(this.palettes.base[i].hex)\r\n      color.hsv = {\r\n        h: color.addToHue(color.hsv.h, hue),\r\n        s: Math.max(0, Math.min(100, color.hsv.s + saturation)),\r\n        v: Math.max(0, Math.min(100, color.hsv.v - value)),\r\n      }\r\n\r\n      this.palettes.dark.push(color)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our {@link palettes#base | base palette}.\r\n   * @readonly\r\n   */\r\n  get basePalette() {\r\n    return this.palettes.base\r\n  }\r\n\r\n  /**\r\n   * Get our {@link palettes#light | light palette}.\r\n   * @readonly\r\n   */\r\n  get lightPalette() {\r\n    return this.palettes.light\r\n  }\r\n\r\n  /**\r\n   * Get our {@link palettes#dark | dark palette}.\r\n   * @readonly\r\n   */\r\n  get darkPalette() {\r\n    return this.palettes.dark\r\n  }\r\n\r\n  /**\r\n   * Get all the palettes as an array, in the {@link palettes#light | light palette}, {@link palettes#base | base palette}, and {@link palettes#dark | dark palette} order.\r\n   * @readonly\r\n   */\r\n  get fullPalette(): ColorPalette {\r\n    return [...this.palettes.light, ...this.palettes.base, ...this.palettes.dark]\r\n  }\r\n\r\n  /**\r\n   * Generates a random {@link ColorPalette} from our generated {@link palettes}.\r\n   * @param param Parameters used to generate the random {@link ColorPalette}.\r\n   * @param param.length Number of {@link ColorModel} returned. Default to `4`.\r\n   * @param param.includeBaseColor Number of {@link ColorModel} Whether to include the {@link baseColor} in the returned {@link ColorPalette}. Default to `false`.\r\n   * @param param.filterPasses Whether to remove every other colors before generating the random palette. Used to avoid getting 2 colors too close. Default to `true`.\r\n   * @param param.sortByBrightness Whether to sort the returned {@link ColorModel} by brightness/value, from dark to light. Default to `true`.\r\n   * @param param.minSaturation Minimum saturation level of the random returned {@link ColorModel}. Default to `0`.\r\n   * @param param.maxSaturation Maximum saturation level of the random returned {@link ColorModel}. Default to `100`.\r\n   * @returns Random {@link ColorPalette}.\r\n   */\r\n  getRandomPalette({\r\n    length = 4,\r\n    includeBaseColor = false,\r\n    filterPasses = true,\r\n    sortByBrightness = true,\r\n    minSaturation = 0,\r\n    maxSaturation = 100,\r\n  }: {\r\n    /** Number of {@link ColorModel} returned. Default to `4`. */\r\n    length?: number\r\n    /** Whether to include the {@link baseColor} in the returned {@link ColorPalette}. Default to `false`. */\r\n    includeBaseColor?: boolean\r\n    /** Whether to remove every other colors before generating the random palette. Used to avoid getting 2 colors too close. Default to `true`. */\r\n    filterPasses?: boolean\r\n    /** Whether to sort the returned {@link ColorModel} by brightness/value, from dark to light. Default to `true`. */\r\n    sortByBrightness?: boolean\r\n    /** Minimum saturation level of the random returned {@link ColorModel}. Default to `0`. */\r\n    minSaturation?: number\r\n    /** Maximum saturation level of the random returned {@link ColorModel}. Default to `100`. */\r\n    maxSaturation?: number\r\n  }): ColorPalette {\r\n    if (length < 1) length = 1\r\n\r\n    // get all generated colors\r\n    let randomPalette: ColorPalette = [...this.fullPalette]\r\n\r\n    // saturation filters\r\n    randomPalette = randomPalette.filter((c) => c.hsv.s >= minSaturation)\r\n    randomPalette = randomPalette.filter((c) => c.hsv.s <= maxSaturation)\r\n\r\n    // filterPasses means we're going to remove every other colors (one out of 2)\r\n    // this is used to avoid getting 2 colors too close\r\n    // also useful to removed first and last values (usually white and black respectively)\r\n    if (filterPasses && this.precision > 2) {\r\n      for (let i = 0; i < 2; i++) {\r\n        randomPalette = randomPalette.filter((c, index) => index % 2 === 1)\r\n      }\r\n    }\r\n\r\n    // shuffle it\r\n    randomPalette.sort(() => this.rand() - 0.5)\r\n    // get the first X elements\r\n    randomPalette = randomPalette.slice(0, length)\r\n\r\n    if (includeBaseColor) {\r\n      const hasBaseColor = randomPalette.find((c) => c.equals(this.baseColor))\r\n\r\n      if (!hasBaseColor) {\r\n        randomPalette[0] = this.baseColor\r\n      }\r\n    }\r\n\r\n    // sort by brightness (value in fact)\r\n    // from dark to light\r\n    if (sortByBrightness) {\r\n      randomPalette.sort((a, b) => a.hsv.v - b.hsv.v)\r\n    }\r\n\r\n    return randomPalette\r\n  }\r\n\r\n  /**\r\n   * Generates a distributed {@link ColorPalette} from our generated {@link palettes}, which is an attempt at get evenly/clever distributed colors.\r\n   * @param param Parameters used to generate the distributed {@link ColorPalette}.\r\n   * @param param.length Number of {@link ColorModel} returned. Default to `4`.\r\n   * @param param.includeBaseColor Number of {@link ColorModel} Whether to include the {@link baseColor} in the returned {@link ColorPalette}. Default to `false`.\r\n   * @param param.sortByBrightness Whether to sort the returned {@link ColorModel} by brightness/value, from dark to light. Default to `true`.\r\n   * @param param.minSaturation Minimum saturation level of the returned {@link ColorModel}. Default to `0`.\r\n   * @param param.maxSaturation Maximum saturation level of the returned {@link ColorModel}. Default to `100`.\r\n   * @returns Distributed {@link ColorPalette}.\r\n   */\r\n  getDistributedPalette({\r\n    length = 4,\r\n    includeBaseColor = false,\r\n    sortByBrightness = true,\r\n    minSaturation = 0,\r\n    maxSaturation = 100,\r\n  }: {\r\n    /** Number of {@link ColorModel} returned. Default to `4`. */\r\n    length?: number\r\n    /** Whether to include the {@link baseColor} in the returned {@link ColorPalette}. Default to `false`. */\r\n    includeBaseColor?: boolean\r\n    /** Whether to sort the returned {@link ColorModel} by brightness/value, from dark to light. Default to `true`. */\r\n    sortByBrightness?: boolean\r\n    /** Minimum saturation level of the returned {@link ColorModel}. Default to `0`. */\r\n    minSaturation?: number\r\n    /** Maximum saturation level of the returned {@link ColorModel}. Default to `100`. */\r\n    maxSaturation?: number\r\n  }): ColorPalette {\r\n    let returnedPalette: ColorPalette = []\r\n\r\n    if (includeBaseColor) {\r\n      returnedPalette.push(this.baseColor)\r\n      length = Math.max(0, length - 1)\r\n    }\r\n\r\n    let fullPalette = [...this.fullPalette]\r\n\r\n    // saturation filters\r\n    fullPalette = fullPalette.filter((c) => c.hsv.s >= minSaturation)\r\n    fullPalette = fullPalette.filter((c) => c.hsv.s <= maxSaturation)\r\n\r\n    // if there's not enough element we might get a timeout with our recursive loops\r\n    // just return first randomized colors\r\n    if (fullPalette.length <= length + 1) {\r\n      fullPalette.sort(() => this.rand() - 0.5)\r\n      // get the first X elements\r\n      fullPalette = fullPalette.slice(0, length)\r\n\r\n      return fullPalette\r\n    }\r\n\r\n    const darkPalette = fullPalette.filter((c) => c.hsv.v <= 37.5)\r\n    const lightPalette = fullPalette.filter((c) => c.hsv.v >= 87.5)\r\n    const basePalette = fullPalette.filter((c) => c.hsv.v > 37.5 && c.hsv.v < 87.5)\r\n\r\n    const getRandomIndex = (array: ColorPalette): number => {\r\n      return Math.floor(this.rand() * array.length)\r\n    }\r\n\r\n    const darkColorIndexes = []\r\n    const lightColorIndexes = []\r\n    const baseColorIndexes = []\r\n\r\n    let nbColors = 0\r\n\r\n    // dark colors\r\n    if (darkPalette.length) {\r\n      const darkIterations = Math.min(darkPalette.length, Math.floor(length / 4))\r\n      for (let i = 0; i < darkIterations; i++) {\r\n        let index: number | null = null\r\n\r\n        while (\r\n          index === null ||\r\n          darkColorIndexes.includes(index) ||\r\n          (includeBaseColor && darkPalette[index].equals(this.baseColor))\r\n        ) {\r\n          index = getRandomIndex(darkPalette)\r\n        }\r\n\r\n        darkColorIndexes.push(index)\r\n        nbColors++\r\n        returnedPalette.push(darkPalette[index])\r\n      }\r\n    }\r\n\r\n    // light colors\r\n    if (lightPalette.length) {\r\n      const lightIterations = Math.min(lightPalette.length, Math.floor(length / 4))\r\n      for (let i = 0; i < lightIterations; i++) {\r\n        let index: number | null = null\r\n\r\n        while (\r\n          index === null ||\r\n          lightColorIndexes.includes(index) ||\r\n          (includeBaseColor && lightPalette[index].equals(this.baseColor))\r\n        ) {\r\n          index = getRandomIndex(lightPalette)\r\n        }\r\n\r\n        lightColorIndexes.push(index)\r\n        nbColors++\r\n        returnedPalette.push(lightPalette[index])\r\n      }\r\n    }\r\n\r\n    // base colors\r\n    const baseIterations = Math.min(basePalette.length, length - nbColors)\r\n    for (let i = 0; i < baseIterations; i++) {\r\n      let index: number | null = null\r\n\r\n      while (\r\n        index === null ||\r\n        baseColorIndexes.includes(index) ||\r\n        (includeBaseColor && basePalette[index].equals(this.baseColor))\r\n      ) {\r\n        index = getRandomIndex(basePalette)\r\n      }\r\n\r\n      baseColorIndexes.push(index)\r\n      returnedPalette.push(basePalette[index])\r\n    }\r\n\r\n    // sort by brightness (value in fact)\r\n    // from dark to light\r\n    if (sortByBrightness) {\r\n      returnedPalette.sort((a, b) => a.hsv.v - b.hsv.v)\r\n    }\r\n\r\n    return returnedPalette\r\n  }\r\n}\r\n"],"names":["_hex","_rgb","_hsl","_hsv","_ColorModel","__name","hexCode","__privateAdd","__privateGet","value","__privateSet","r","g","b","toHex","x","hex","result","max","min","h","s","l","d","output","hue2rgb","p","q","t","L","V","v","m","normalized","c","y","k","color","saturation","currentSat","brightness","currentBrightness","lightness","currentLightness","add","ColorModel","ColorPaletteGenerator","rand","precision","hueRange","baseColor","baseSaturation","hueStep","endSaturation","endValue","i","hue","length","includeBaseColor","filterPasses","sortByBrightness","minSaturation","maxSaturation","randomPalette","index","a","returnedPalette","fullPalette","darkPalette","lightPalette","basePalette","getRandomIndex","array","darkColorIndexes","lightColorIndexes","baseColorIndexes","nbColors","darkIterations","lightIterations","baseIterations"],"mappings":"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"}